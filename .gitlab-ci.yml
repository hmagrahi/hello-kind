# This file is a template, and might need editing before it works on your project.
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Scala.gitlab-ci.yml

# Official OpenJDK Java image. Look for the different tagged releases at
# https://hub.docker.com/_/openjdk/ . A Java image is not required
# but an image with a JVM speeds up the build a bit.
image: openjdk:8
before_script:
  # Enable the usage of sources over https
  - apt-get update -yqq
  - apt-get install apt-transport-https -yqq
  # Add keyserver for SBT
  - echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | tee -a /etc/apt/sources.list.d/sbt.list
  - mkdir -p /root/.gnupg
  - gpg --recv-keys --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/scalasbt-release.gpg --keyserver hkp://keyserver.ubuntu.com:80 2EE0EA64E40A89B84B2DF73499E82A75642AC823
  - chmod 644 /etc/apt/trusted.gpg.d/scalasbt-release.gpg
  # Install SBT
  - apt-get update -yqq
  - apt-get install sbt -yqq
  # Log the sbt version
  - sbt sbtVersion

test:
  cache:
    key:
      files:
        - build.sbt
    paths:
      - "sbt-cache/ivy/cache"
      - "sbt-cache/coursier"
  script:
    # Execute your project's tests
    - sbt clean coverage scalafmtCheck scalafmtSbtCheck test coverageReport coverageAggregate
  artifacts:
    paths:
      - "target/scala-*/scapegoat-report"
      - "target/scala-*/scoverage-report"
      - "target/it-reports/*.xml"
    reports:
      junit:
        - target/**/TEST-*.xml
    expire_in: "2 hours"

helm-test:
  services:
    - docker:19.03.13-dind
  variables:
    DOCKER_HOST: tcp://docker:2375

  before_script:
    -  curl -fsSL https://get.docker.com -o get-docker.sh
    -  sh get-docker.sh
    - curl -LO https://dl.k8s.io/release/v1.25.0/bin/linux/amd64/kubectl
    - install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    - chmod +x kubectl
    - mkdir -p ~/.local/bin
    - mv ./kubectl ~/.local/bin/kubectl
    - curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.16.0/kind-linux-amd64 --insecure
    - chmod +x ./kind
    - mv ./kind /usr/local/bin/kind
    - kind version
    - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    - chmod 700 get_helm.sh
    - ./get_helm.sh
  script:
    - kind create cluster --name kind --wait 180s
    - kind get kubeconfig --name kind
    - export KUBECONFIG=~/.kube/config
    - apt -y install iproute2
    - export REAL_IP=$(ip route|awk '/default/ { print $3 }')
    - echo $REAL_IP
    - sed -i -e "s/127.0.0.1/$REAL_IP/g" $KUBECONFIG
    - cat $KUBECONFIG
    - kind get kubeconfig --name kind
    - kubectl cluster-info --context kind-kind
    - chmod +x scripts/mock-cluster.sh
    - ./scripts/mock-cluster.sh

test_integration_k8s:
  image: python:3.6.6 #the docker image you run in needs Docker installed, and access to the host docker socket.
  tags:
  - linux-docker
  stage: test
  before_script:
    - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.12.0/bin/linux/amd64/kubectl
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
    - curl -Lo kind https://github.com/kubernetes-sigs/kind/releases/download/0.1.0/kind-linux-amd64
    - chmod +x kind
    - mv kind /usr/local/bin/
    - kind create cluster --name $CI_PIPELINE_ID --wait 180s
    - export KUBECONFIG="$(kind get kubeconfig-path --name $CI_PIPELINE_ID)"
    - REAL_IP=$(ip route|awk '/default/ { print $3 }')
    - sed -i -e "s/localhost/$REAL_IP/g" $KUBECONFIG
  script:
    - kubectl get nodes --insecure-skip-tls-verify=true
  after_script:
    - kind delete cluster --name $CI_PIPELINE_ID
deploy:
  stage: deploy
  script: echo "Define your deployment script!"
  environment: production
